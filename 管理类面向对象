strategy pattern
  算法/startegies 之间可以相互替换
  有很多if-else的情况，可以用config的strategy
  工厂类专门生产strategy
  不要用temp 来取名字
  
管理列：OOD 高频，难度中等
  GYM
  Parking LOT 
  Restaurant
  library
  Super market
  Hotel

parking lot:
  考虑input 和 output是什么
  
 几层parking lot?一个车位有几层？
 list of parking lot
 list of parking level, evey level has parking lot number
 
 哪几种类型parking lot,残爬？

vehicle:
  motocycle, bus, car,电车
  

 

 
public class Parking Lot {
  private static ParkingLot _instance = Null;
  private List<level> levels;
  
  private ParkingLot() {
    levels = new ArrayList<level>();
  }
  public static synchronized ParkingLot getInstance() ;# 给线程枷锁
  {
    if (_instance==Null) {
      _instance = new ParkingLot();
    }
    return _instance;
  }
}

以下方法更好，线程更安全，更快

public class ParkingLot
{
  private ParkingLot() {}
  private static class LazyParkingLot {# 在编译的时间就构建了
    static final ParkingLot _instance = new ParkingLot();#final 保证外部其他的线程进行改变
  }
  public static ParkingLot getInstnace()
  {
    return LazyParkingLot._instance()
  }
}

类在static 时，编译会运行他
